import fs from 'fs'
import path from 'path'

// 创建一个简单但有效的 PNG 图标 (16x16 蓝色方块)
function createIcon(size) {
  // 这是一个简单的蓝色方块 PNG 的字节数据
  const pngHeader = [
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG 签名
    0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
    0x00, 0x00, 0x00, size, 0x00, 0x00, 0x00, size,  // 宽度和高度
    0x08, 0x02, 0x00, 0x00, 0x00                     // 位深度、颜色类型等
  ]
  
  // 简单的蓝色像素数据
  const bluePixel = [0x19, 0x76, 0xD2] // #1976d2 蓝色
  const pixelData = []
  
  for (let y = 0; y < size; y++) {
    pixelData.push(0x00) // 行过滤器类型
    for (let x = 0; x < size; x++) {
      pixelData.push(...bluePixel)
    }
  }
  
  // 创建最小有效 PNG（实际上这是简化版本）
  const minimalPNG = [
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
    0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x91, 0x68,
    0x36, 0x00, 0x00, 0x00, 0x3C, 0x49, 0x44, 0x41,
    0x54, 0x28, 0x15, 0x63, 0x64, 0x60, 0xF8, 0x0F,
    0xC3, 0x50, 0x30, 0x0A, 0x46, 0xC1, 0x28, 0x18,
    0x05, 0xA3, 0x60, 0x14, 0x8C, 0x82, 0x51, 0x30,
    0x0A, 0x46, 0xC1, 0x28, 0x18, 0x05, 0xA3, 0x60,
    0x14, 0x8C, 0x82, 0x51, 0x30, 0x0A, 0x46, 0xC1,
    0x28, 0x18, 0x05, 0xA3, 0x60, 0x14, 0x8C, 0x82,
    0x51, 0x30, 0x0A, 0x46, 0xC1, 0x28, 0x18, 0x05,
    0x00, 0x00, 0x04, 0x10, 0x00, 0x01, 0x27, 0xDF,
    0xBE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
  ]
  
  return Buffer.from(minimalPNG)
}

const iconsDir = './dist/icons'
const sizes = [16, 48, 128]

// 确保目录存在
if (!fs.existsSync(iconsDir)) {
  fs.mkdirSync(iconsDir, { recursive: true })
}

// 为每个尺寸创建 PNG 文件
sizes.forEach(size => {
  const iconBuffer = createIcon(size)
  const iconPath = path.join(iconsDir, `icon${size}.png`)
  fs.writeFileSync(iconPath, iconBuffer)
  console.log(`✅ 创建图标: ${iconPath} (${iconBuffer.length} bytes)`)
})

console.log('🎉 图标创建完成！现在可以在 Chrome 中加载插件了。')
console.log('💡 提示: 如果需要自定义图标，请在项目根目录创建 icons/ 文件夹并放入你的图标文件。') 